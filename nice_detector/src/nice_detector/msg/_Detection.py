"""autogenerated by genpy from nice_detector/Detection.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import sensor_msgs.msg
import geometry_msgs.msg
import visualization_msgs.msg
import std_msgs.msg

class Detection(genpy.Message):
  _md5sum = "dab6b181eecc7fb7570f4217f113077d"
  _type = "nice_detector/Detection"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """visualization_msgs/Marker box

geometry_msgs/Vector3 						centroid
#geometry_msgs/Vector3 						bottom
#geometry_msgs/Vector3 						top

float32 									height
float64 									confidence
float32 									distance

bool 										occluded
sensor_msgs/Image 							blob
Header 										header
sensor_msgs/PointCloud2 					cluster


================================================================================
MSG: visualization_msgs/Marker
# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz

uint8 ARROW=0
uint8 CUBE=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 LINE_STRIP=4
uint8 LINE_LIST=5
uint8 CUBE_LIST=6
uint8 SPHERE_LIST=7
uint8 POINTS=8
uint8 TEXT_VIEW_FACING=9
uint8 MESH_RESOURCE=10
uint8 TRIANGLE_LIST=11

uint8 ADD=0
uint8 MODIFY=0
uint8 DELETE=2

Header header                        # header for time/frame information
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later
int32 type 		                       # Type of object
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object
geometry_msgs/Pose pose                 # Pose of the object
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)
std_msgs/ColorRGBA color             # Color [0.0-1.0]
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep

#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
geometry_msgs/Point[] points
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
#number of colors must either be 0 or equal to the number of points
#NOTE: alpha is not yet used
std_msgs/ColorRGBA[] colors

# NOTE: only used for text markers
string text

# NOTE: only used for MESH_RESOURCE markers
string mesh_resource
bool mesh_use_embedded_materials

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in src/image_encodings.cpp

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

"""
  __slots__ = ['box','centroid','height','confidence','distance','occluded','blob','header','cluster']
  _slot_types = ['visualization_msgs/Marker','geometry_msgs/Vector3','float32','float64','float32','bool','sensor_msgs/Image','std_msgs/Header','sensor_msgs/PointCloud2']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       box,centroid,height,confidence,distance,occluded,blob,header,cluster

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Detection, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.box is None:
        self.box = visualization_msgs.msg.Marker()
      if self.centroid is None:
        self.centroid = geometry_msgs.msg.Vector3()
      if self.height is None:
        self.height = 0.
      if self.confidence is None:
        self.confidence = 0.
      if self.distance is None:
        self.distance = 0.
      if self.occluded is None:
        self.occluded = False
      if self.blob is None:
        self.blob = sensor_msgs.msg.Image()
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.cluster is None:
        self.cluster = sensor_msgs.msg.PointCloud2()
    else:
      self.box = visualization_msgs.msg.Marker()
      self.centroid = geometry_msgs.msg.Vector3()
      self.height = 0.
      self.confidence = 0.
      self.distance = 0.
      self.occluded = False
      self.blob = sensor_msgs.msg.Image()
      self.header = std_msgs.msg.Header()
      self.cluster = sensor_msgs.msg.PointCloud2()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.box.header.seq, _x.box.header.stamp.secs, _x.box.header.stamp.nsecs))
      _x = self.box.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.box.ns
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i10d4f2iB.pack(_x.box.id, _x.box.type, _x.box.action, _x.box.pose.position.x, _x.box.pose.position.y, _x.box.pose.position.z, _x.box.pose.orientation.x, _x.box.pose.orientation.y, _x.box.pose.orientation.z, _x.box.pose.orientation.w, _x.box.scale.x, _x.box.scale.y, _x.box.scale.z, _x.box.color.r, _x.box.color.g, _x.box.color.b, _x.box.color.a, _x.box.lifetime.secs, _x.box.lifetime.nsecs, _x.box.frame_locked))
      length = len(self.box.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.box.points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.box.colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.box.colors:
        _x = val1
        buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
      _x = self.box.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.box.mesh_resource
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3dfdfB3I.pack(_x.box.mesh_use_embedded_materials, _x.centroid.x, _x.centroid.y, _x.centroid.z, _x.height, _x.confidence, _x.distance, _x.occluded, _x.blob.header.seq, _x.blob.header.stamp.secs, _x.blob.header.stamp.nsecs))
      _x = self.blob.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.blob.height, _x.blob.width))
      _x = self.blob.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.blob.is_bigendian, _x.blob.step))
      _x = self.blob.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.cluster.header.seq, _x.cluster.header.stamp.secs, _x.cluster.header.stamp.nsecs))
      _x = self.cluster.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.cluster.height, _x.cluster.width))
      length = len(self.cluster.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.cluster.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.cluster.is_bigendian, _x.cluster.point_step, _x.cluster.row_step))
      _x = self.cluster.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.cluster.is_dense))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.box is None:
        self.box = visualization_msgs.msg.Marker()
      if self.centroid is None:
        self.centroid = geometry_msgs.msg.Vector3()
      if self.blob is None:
        self.blob = sensor_msgs.msg.Image()
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.cluster is None:
        self.cluster = sensor_msgs.msg.PointCloud2()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.box.header.seq, _x.box.header.stamp.secs, _x.box.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.box.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.box.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.box.ns = str[start:end].decode('utf-8')
      else:
        self.box.ns = str[start:end]
      _x = self
      start = end
      end += 117
      (_x.box.id, _x.box.type, _x.box.action, _x.box.pose.position.x, _x.box.pose.position.y, _x.box.pose.position.z, _x.box.pose.orientation.x, _x.box.pose.orientation.y, _x.box.pose.orientation.z, _x.box.pose.orientation.w, _x.box.scale.x, _x.box.scale.y, _x.box.scale.z, _x.box.color.r, _x.box.color.g, _x.box.color.b, _x.box.color.a, _x.box.lifetime.secs, _x.box.lifetime.nsecs, _x.box.frame_locked,) = _struct_3i10d4f2iB.unpack(str[start:end])
      self.box.frame_locked = bool(self.box.frame_locked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.box.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.box.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.box.colors = []
      for i in range(0, length):
        val1 = std_msgs.msg.ColorRGBA()
        _x = val1
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
        self.box.colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.box.text = str[start:end].decode('utf-8')
      else:
        self.box.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.box.mesh_resource = str[start:end].decode('utf-8')
      else:
        self.box.mesh_resource = str[start:end]
      _x = self
      start = end
      end += 54
      (_x.box.mesh_use_embedded_materials, _x.centroid.x, _x.centroid.y, _x.centroid.z, _x.height, _x.confidence, _x.distance, _x.occluded, _x.blob.header.seq, _x.blob.header.stamp.secs, _x.blob.header.stamp.nsecs,) = _struct_B3dfdfB3I.unpack(str[start:end])
      self.box.mesh_use_embedded_materials = bool(self.box.mesh_use_embedded_materials)
      self.occluded = bool(self.occluded)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blob.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.blob.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.blob.height, _x.blob.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blob.encoding = str[start:end].decode('utf-8')
      else:
        self.blob.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.blob.is_bigendian, _x.blob.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blob.data = str[start:end].decode('utf-8')
      else:
        self.blob.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.cluster.header.seq, _x.cluster.header.stamp.secs, _x.cluster.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cluster.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.cluster.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.cluster.height, _x.cluster.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cluster.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.cluster.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.cluster.is_bigendian, _x.cluster.point_step, _x.cluster.row_step,) = _struct_B2I.unpack(str[start:end])
      self.cluster.is_bigendian = bool(self.cluster.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cluster.data = str[start:end].decode('utf-8')
      else:
        self.cluster.data = str[start:end]
      start = end
      end += 1
      (self.cluster.is_dense,) = _struct_B.unpack(str[start:end])
      self.cluster.is_dense = bool(self.cluster.is_dense)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.box.header.seq, _x.box.header.stamp.secs, _x.box.header.stamp.nsecs))
      _x = self.box.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.box.ns
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i10d4f2iB.pack(_x.box.id, _x.box.type, _x.box.action, _x.box.pose.position.x, _x.box.pose.position.y, _x.box.pose.position.z, _x.box.pose.orientation.x, _x.box.pose.orientation.y, _x.box.pose.orientation.z, _x.box.pose.orientation.w, _x.box.scale.x, _x.box.scale.y, _x.box.scale.z, _x.box.color.r, _x.box.color.g, _x.box.color.b, _x.box.color.a, _x.box.lifetime.secs, _x.box.lifetime.nsecs, _x.box.frame_locked))
      length = len(self.box.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.box.points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.box.colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.box.colors:
        _x = val1
        buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
      _x = self.box.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.box.mesh_resource
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3dfdfB3I.pack(_x.box.mesh_use_embedded_materials, _x.centroid.x, _x.centroid.y, _x.centroid.z, _x.height, _x.confidence, _x.distance, _x.occluded, _x.blob.header.seq, _x.blob.header.stamp.secs, _x.blob.header.stamp.nsecs))
      _x = self.blob.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.blob.height, _x.blob.width))
      _x = self.blob.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.blob.is_bigendian, _x.blob.step))
      _x = self.blob.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.cluster.header.seq, _x.cluster.header.stamp.secs, _x.cluster.header.stamp.nsecs))
      _x = self.cluster.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.cluster.height, _x.cluster.width))
      length = len(self.cluster.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.cluster.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.cluster.is_bigendian, _x.cluster.point_step, _x.cluster.row_step))
      _x = self.cluster.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.cluster.is_dense))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.box is None:
        self.box = visualization_msgs.msg.Marker()
      if self.centroid is None:
        self.centroid = geometry_msgs.msg.Vector3()
      if self.blob is None:
        self.blob = sensor_msgs.msg.Image()
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.cluster is None:
        self.cluster = sensor_msgs.msg.PointCloud2()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.box.header.seq, _x.box.header.stamp.secs, _x.box.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.box.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.box.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.box.ns = str[start:end].decode('utf-8')
      else:
        self.box.ns = str[start:end]
      _x = self
      start = end
      end += 117
      (_x.box.id, _x.box.type, _x.box.action, _x.box.pose.position.x, _x.box.pose.position.y, _x.box.pose.position.z, _x.box.pose.orientation.x, _x.box.pose.orientation.y, _x.box.pose.orientation.z, _x.box.pose.orientation.w, _x.box.scale.x, _x.box.scale.y, _x.box.scale.z, _x.box.color.r, _x.box.color.g, _x.box.color.b, _x.box.color.a, _x.box.lifetime.secs, _x.box.lifetime.nsecs, _x.box.frame_locked,) = _struct_3i10d4f2iB.unpack(str[start:end])
      self.box.frame_locked = bool(self.box.frame_locked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.box.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.box.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.box.colors = []
      for i in range(0, length):
        val1 = std_msgs.msg.ColorRGBA()
        _x = val1
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
        self.box.colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.box.text = str[start:end].decode('utf-8')
      else:
        self.box.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.box.mesh_resource = str[start:end].decode('utf-8')
      else:
        self.box.mesh_resource = str[start:end]
      _x = self
      start = end
      end += 54
      (_x.box.mesh_use_embedded_materials, _x.centroid.x, _x.centroid.y, _x.centroid.z, _x.height, _x.confidence, _x.distance, _x.occluded, _x.blob.header.seq, _x.blob.header.stamp.secs, _x.blob.header.stamp.nsecs,) = _struct_B3dfdfB3I.unpack(str[start:end])
      self.box.mesh_use_embedded_materials = bool(self.box.mesh_use_embedded_materials)
      self.occluded = bool(self.occluded)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blob.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.blob.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.blob.height, _x.blob.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blob.encoding = str[start:end].decode('utf-8')
      else:
        self.blob.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.blob.is_bigendian, _x.blob.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blob.data = str[start:end].decode('utf-8')
      else:
        self.blob.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.cluster.header.seq, _x.cluster.header.stamp.secs, _x.cluster.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cluster.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.cluster.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.cluster.height, _x.cluster.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cluster.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.cluster.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.cluster.is_bigendian, _x.cluster.point_step, _x.cluster.row_step,) = _struct_B2I.unpack(str[start:end])
      self.cluster.is_bigendian = bool(self.cluster.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cluster.data = str[start:end].decode('utf-8')
      else:
        self.cluster.data = str[start:end]
      start = end
      end += 1
      (self.cluster.is_dense,) = _struct_B.unpack(str[start:end])
      self.cluster.is_dense = bool(self.cluster.is_dense)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_IBI = struct.Struct("<IBI")
_struct_B = struct.Struct("<B")
_struct_BI = struct.Struct("<BI")
_struct_3I = struct.Struct("<3I")
_struct_3i10d4f2iB = struct.Struct("<3i10d4f2iB")
_struct_B2I = struct.Struct("<B2I")
_struct_4f = struct.Struct("<4f")
_struct_B3dfdfB3I = struct.Struct("<B3dfdfB3I")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
